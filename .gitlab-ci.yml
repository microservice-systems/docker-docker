stages:
  - Build
  - Push

variables:
  APPLICATION: "docker"
  VERSION: "20.10.10"
  REVISION: "$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA"
  NAME: "Docker"
  DESCRIPTION: "Docker in Docker Image"
  REPOSITORY: "$CI_PROJECT_URL"
  REPOSITORY_TYPE: "GITLAB"
  JOB: "$CI_JOB_URL"
  JOB_TYPE: "GITLAB"
  MAINTAINER: "$GITLAB_USER_LOGIN"
  MAINTAINER_NAME: "$GITLAB_USER_NAME"
  MAINTAINER_EMAIL: "$GITLAB_USER_EMAIL"

.build-docker-before-script:
  before_script:
    - set -e
    - apk add --no-cache uuidgen
    - export BUILD="$(uuidgen)"
    - if [[ -z $REGISTRY ]]; then echo "REGISTRY is not specified, using Docker Hub"; else echo REGISTRY="$REGISTRY"; fi
    - if [[ -z $GROUP ]]; then echo "GROUP is not specified"; exit 1; else echo GROUP="$GROUP"; fi
    - if [[ -z $APPLICATION ]]; then echo "APPLICATION is not specified"; exit 1; else echo APPLICATION="$APPLICATION"; fi
    - if [[ -z $VERSION ]]; then echo "VERSION is not specified"; exit 1; else echo VERSION="$VERSION"; fi
    - if [[ -z $REVISION ]]; then echo "REVISION is not specified"; exit 1; else echo REVISION="$REVISION"; fi
    - if [[ -z $BUILD ]]; then echo "BUILD is not specified"; exit 1; else echo BUILD="$BUILD"; fi
    - if [[ -z $NAME ]]; then echo "NAME is not specified"; exit 1; else echo NAME="$NAME"; fi
    - if [[ -z $DESCRIPTION ]]; then echo "DESCRIPTION is not specified"; exit 1; else echo DESCRIPTION="$DESCRIPTION"; fi
    - if [[ -z $REPOSITORY ]]; then echo "REPOSITORY is not specified"; exit 1; else echo REPOSITORY="$REPOSITORY"; fi
    - if [[ -z $REPOSITORY_TYPE ]]; then echo "REPOSITORY_TYPE is not specified"; exit 1; else echo REPOSITORY_TYPE="$REPOSITORY_TYPE"; fi
    - if [[ -z $JOB ]]; then echo "JOB is not specified"; exit 1; else echo JOB="$JOB"; fi
    - if [[ -z $JOB_TYPE ]]; then echo "JOB_TYPE is not specified"; exit 1; else echo JOB_TYPE="$JOB_TYPE"; fi
    - if [[ -z $MAINTAINER ]]; then echo "MAINTAINER is not specified"; exit 1; else echo MAINTAINER="$MAINTAINER"; fi
    - if [[ -z $MAINTAINER_NAME ]]; then echo "MAINTAINER_NAME is not specified"; exit 1; else echo MAINTAINER_NAME="$MAINTAINER_NAME"; fi
    - if [[ -z $MAINTAINER_EMAIL ]]; then echo "MAINTAINER_EMAIL is not specified"; exit 1; else echo MAINTAINER_EMAIL="$MAINTAINER_EMAIL"; fi
    - docker build --no-cache --file ./Dockerfile
                              --build-arg registry="$REGISTRY"
                              --build-arg group="$GROUP"
                              --build-arg application="$APPLICATION"
                              --build-arg version="$VERSION"
                              --build-arg revision="$REVISION"
                              --build-arg build="$BUILD"
                              --build-arg name="$NAME"
                              --build-arg description="$DESCRIPTION"
                              --build-arg repository="$REPOSITORY"
                              --build-arg repository_type="$REPOSITORY_TYPE"
                              --build-arg job="$JOB"
                              --build-arg job_type="$JOB_TYPE"
                              --build-arg ci_pipeline_url="$CI_PIPELINE_URL"
                              --build-arg ci_commit_branch="$CI_COMMIT_REF_NAME"
                              --build-arg ci_commit_sha="$CI_COMMIT_SHA"
                              --build-arg ci_commit_message="$CI_COMMIT_MESSAGE"
                              --build-arg ci_commit_before_sha="$CI_COMMIT_BEFORE_SHA"
                              --build-arg maintainer="$MAINTAINER"
                              --build-arg maintainer_name="$MAINTAINER_NAME"
                              --build-arg maintainer_email="$MAINTAINER_EMAIL"
                              --tag $REGISTRY$GROUP/$APPLICATION:$VERSION .

docker:
  stage: Build
  image: docker:20.10.11
  when: on_success
  extends: .build-docker-before-script
  script:
    - set -e
    - docker rmi $(docker images --filter "label=build=$BUILD" -q)
  tags:
    - docker

registry:
  stage: Push
  image: docker:20.10.11
  when: manual
  extends: .build-docker-before-script
  script:
    - set -e
    - mkdir -p ~/.docker
    - echo $REGISTRY_AUTH > ~/.docker/config.json
    - docker push $REGISTRY$GROUP/$APPLICATION:$VERSION
    - docker rmi $(docker images --filter "label=build=$BUILD" -q)
  only:
    - tags
    - release/*
  tags:
    - docker
