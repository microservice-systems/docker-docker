stages:
  - Build
  - Push

variables:
  APPLICATION: "docker"
  VERSION: "20.10.10"
  NAME: "Docker"
  DESCRIPTION: "Docker in Docker Image"

docker:
  stage: Build
  image: docker:20.10.11
  when: on_success
  script:
    - set -e
    - apk add --no-cache uuidgen
    - export REVISION="$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA"
    - export BUILD="$(uuidgen)"
    - export MAINTAINER_LOGIN="$GITLAB_USER_LOGIN"
    - export MAINTAINER_NAME="$GITLAB_USER_NAME"
    - export MAINTAINER_EMAIL="$GITLAB_USER_EMAIL"
    - if [[ -z $REGISTRY ]]; then echo "REGISTRY is not specified, using Docker Hub"; else echo REGISTRY="$REGISTRY"; fi
    - if [[ -z $GROUP ]]; then echo "GROUP is not specified"; exit 1; else echo GROUP="$GROUP"; fi
    - if [[ -z $APPLICATION ]]; then echo "APPLICATION is not specified"; exit 1; else echo APPLICATION="$APPLICATION"; fi
    - if [[ -z $VERSION ]]; then echo "VERSION is not specified"; exit 1; else echo VERSION="$VERSION"; fi
    - if [[ -z $REVISION ]]; then echo "REVISION is not specified"; exit 1; else echo REVISION="$REVISION"; fi
    - if [[ -z $BUILD ]]; then echo "BUILD is not specified"; exit 1; else echo BUILD="$BUILD"; fi
    - if [[ -z $NAME ]]; then echo "NAME is not specified"; exit 1; else echo NAME="$NAME"; fi
    - if [[ -z $DESCRIPTION ]]; then echo "DESCRIPTION is not specified"; exit 1; else echo DESCRIPTION="$DESCRIPTION"; fi
    - if [[ -z $MAINTAINER_LOGIN ]]; then echo "MAINTAINER_LOGIN is not specified"; exit 1; else echo MAINTAINER_LOGIN="$MAINTAINER_LOGIN"; fi
    - if [[ -z $MAINTAINER_NAME ]]; then echo "MAINTAINER_NAME is not specified"; exit 1; else echo MAINTAINER_NAME="$MAINTAINER_NAME"; fi
    - if [[ -z $MAINTAINER_EMAIL ]]; then echo "MAINTAINER_EMAIL is not specified"; exit 1; else echo MAINTAINER_EMAIL="$MAINTAINER_EMAIL"; fi
    - docker build --no-cache --file ./Dockerfile
                              --build-arg registry="$REGISTRY"
                              --build-arg group="$GROUP"
                              --build-arg application="$APPLICATION"
                              --build-arg version="$VERSION"
                              --build-arg revision="$REVISION"
                              --build-arg build="$BUILD"
                              --build-arg name="$NAME"
                              --build-arg description="$DESCRIPTION"
                              --build-arg ci_project_url="$CI_PROJECT_URL"
                              --build-arg ci_job_url="$CI_JOB_URL"
                              --build-arg ci_pipeline_url="$CI_PIPELINE_URL"
                              --build-arg ci_commit_branch="$CI_COMMIT_REF_NAME"
                              --build-arg ci_commit_tag="$CI_COMMIT_TAG"
                              --build-arg ci_commit_sha="$CI_COMMIT_SHA"
                              --build-arg ci_commit_message="$CI_COMMIT_MESSAGE"
                              --build-arg ci_commit_before_sha="$CI_COMMIT_BEFORE_SHA"
                              --build-arg maintainer_login="$MAINTAINER_LOGIN"
                              --build-arg maintainer_name="$MAINTAINER_NAME"
                              --build-arg maintainer_email="$MAINTAINER_EMAIL"
                              --tag $REGISTRY$GROUP/$APPLICATION:$VERSION .
    - docker rmi $(docker images --filter "label=build=$BUILD" -q)
  tags:
    - docker

registry:
  stage: Push
  image: docker:20.10.11
  when: manual
  script:
    - set -e
    - apk add --no-cache uuidgen
    - mkdir -p ~/.docker
    - echo $REGISTRY_AUTH > ~/.docker/config.json
    - export REVISION="$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHA"
    - export BUILD="$(uuidgen)"
    - export MAINTAINER_LOGIN="$GITLAB_USER_LOGIN"
    - export MAINTAINER_NAME="$GITLAB_USER_NAME"
    - export MAINTAINER_EMAIL="$GITLAB_USER_EMAIL"
    - if [[ -z $REGISTRY ]]; then echo "REGISTRY is not specified, using Docker Hub"; else echo REGISTRY="$REGISTRY"; fi
    - if [[ -z $GROUP ]]; then echo "GROUP is not specified"; exit 1; else echo GROUP="$GROUP"; fi
    - if [[ -z $APPLICATION ]]; then echo "APPLICATION is not specified"; exit 1; else echo APPLICATION="$APPLICATION"; fi
    - if [[ -z $VERSION ]]; then echo "VERSION is not specified"; exit 1; else echo VERSION="$VERSION"; fi
    - if [[ -z $REVISION ]]; then echo "REVISION is not specified"; exit 1; else echo REVISION="$REVISION"; fi
    - if [[ -z $BUILD ]]; then echo "BUILD is not specified"; exit 1; else echo BUILD="$BUILD"; fi
    - if [[ -z $NAME ]]; then echo "NAME is not specified"; exit 1; else echo NAME="$NAME"; fi
    - if [[ -z $DESCRIPTION ]]; then echo "DESCRIPTION is not specified"; exit 1; else echo DESCRIPTION="$DESCRIPTION"; fi
    - if [[ -z $MAINTAINER_LOGIN ]]; then echo "MAINTAINER_LOGIN is not specified"; exit 1; else echo MAINTAINER_LOGIN="$MAINTAINER_LOGIN"; fi
    - if [[ -z $MAINTAINER_NAME ]]; then echo "MAINTAINER_NAME is not specified"; exit 1; else echo MAINTAINER_NAME="$MAINTAINER_NAME"; fi
    - if [[ -z $MAINTAINER_EMAIL ]]; then echo "MAINTAINER_EMAIL is not specified"; exit 1; else echo MAINTAINER_EMAIL="$MAINTAINER_EMAIL"; fi
    - docker build --no-cache --file ./Dockerfile
                              --build-arg registry="$REGISTRY"
                              --build-arg group="$GROUP"
                              --build-arg application="$APPLICATION"
                              --build-arg version="$VERSION"
                              --build-arg revision="$REVISION"
                              --build-arg build="$BUILD"
                              --build-arg name="$NAME"
                              --build-arg description="$DESCRIPTION"
                              --build-arg ci_project_url="$CI_PROJECT_URL"
                              --build-arg ci_job_url="$CI_JOB_URL"
                              --build-arg ci_pipeline_url="$CI_PIPELINE_URL"
                              --build-arg ci_commit_branch="$CI_COMMIT_REF_NAME"
                              --build-arg ci_commit_tag="$CI_COMMIT_TAG"
                              --build-arg ci_commit_sha="$CI_COMMIT_SHA"
                              --build-arg ci_commit_message="$CI_COMMIT_MESSAGE"
                              --build-arg ci_commit_before_sha="$CI_COMMIT_BEFORE_SHA"
                              --build-arg maintainer_login="$MAINTAINER_LOGIN"
                              --build-arg maintainer_name="$MAINTAINER_NAME"
                              --build-arg maintainer_email="$MAINTAINER_EMAIL"
                              --tag $REGISTRY$GROUP/$APPLICATION:$VERSION .
    - docker push $REGISTRY$GROUP/$APPLICATION:$VERSION
    - docker rmi $(docker images --filter "label=build=$BUILD" -q)
  only:
    - tags
    - release/*
  tags:
    - docker
